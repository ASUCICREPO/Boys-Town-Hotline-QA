{"ast":null,"code":"// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\nexport const uploadService = {\n  // Upload file to S3 using presigned URL\n  async uploadFile(file, onProgress, onStatusChange) {\n    //console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n\n    try {\n      // Get presigned URL\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(10);\n      const urlResponse = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      if (!urlResponse.ok) {\n        throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);\n      }\n      const {\n        uploadUrl\n      } = await urlResponse.json();\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(30);\n\n      // Upload file to S3 with progress simulation\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.upload.addEventListener('progress', e => {\n          if (e.lengthComputable) {\n            const progress = Math.round(30 + e.loaded / e.total * 70);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(progress);\n          }\n        });\n        xhr.addEventListener('load', async () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(100);\n\n            // Wait 5 minutes then get results\n            setTimeout(async () => {\n              try {\n                var _this$statusChangeCal;\n                const results = await this.getResults(file.name);\n                onStatusChange === null || onStatusChange === void 0 ? void 0 : onStatusChange('completed', results);\n                (_this$statusChangeCal = this.statusChangeCallback) === null || _this$statusChangeCal === void 0 ? void 0 : _this$statusChangeCal.call(this, 'completed', results);\n              } catch (error) {\n                var _this$statusChangeCal2;\n                console.error('Error getting results after upload:', error);\n                onStatusChange === null || onStatusChange === void 0 ? void 0 : onStatusChange('failed', null);\n                (_this$statusChangeCal2 = this.statusChangeCallback) === null || _this$statusChangeCal2 === void 0 ? void 0 : _this$statusChangeCal2.call(this, 'failed', null);\n              }\n            }, 240000);\n            resolve({\n              success: true,\n              fileName: file.name,\n              fileSize: file.size\n            });\n          } else {\n            reject(new Error(`Failed to upload file with status: ${xhr.status}`));\n          }\n        });\n        xhr.addEventListener('error', () => {\n          reject(new Error('Upload failed'));\n        });\n        xhr.open('PUT', uploadUrl);\n        xhr.send(file);\n      });\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n  // Get results from API\n  async getResults(originalFileName) {\n    const fileName = `aggregated_${originalFileName.replace('.wav', '')}.json`;\n    //console.log(`Fetching results for fileName: ${fileName}`);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}get-results?fileName=${encodeURIComponent(fileName)}`);\n      if (!response.ok) {\n        throw new Error(`Failed to get results. Status: ${response.status}`);\n      }\n      const results = await response.json();\n      //console.log('Results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching results:', error.message);\n      throw error;\n    }\n  },\n  // Set status change callback\n  setStatusChangeCallback(callback) {\n    this.statusChangeCallback = callback;\n  },\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    //console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      const results = await response.json();\n      //console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    //console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise(resolve => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        //console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          //console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","AWS_REGION","process","env","REACT_APP_AWS_REGION","API_KEY","REACT_APP_AWS_API_KEY","uploadService","uploadFile","file","onProgress","onStatusChange","urlResponse","fetch","method","headers","body","JSON","stringify","fileName","name","fileType","type","ok","Error","status","uploadUrl","json","Promise","resolve","reject","xhr","XMLHttpRequest","upload","addEventListener","e","lengthComputable","progress","Math","round","loaded","total","setTimeout","_this$statusChangeCal","results","getResults","statusChangeCallback","call","error","_this$statusChangeCal2","console","success","fileSize","size","open","send","message","originalFileName","replace","response","encodeURIComponent","setStatusChangeCallback","callback","getAnalysisResults","fileId","simulateUpload","interval","setInterval","clearInterval","result","Date","now","toString"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/uploadService.js"],"sourcesContent":["// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\n\nexport const uploadService = {\n  // Upload file to S3 using presigned URL\n  async uploadFile(file, onProgress, onStatusChange) {\n    //console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    \n    try {\n      // Get presigned URL\n      onProgress?.(10);\n      const urlResponse = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      \n      if (!urlResponse.ok) {\n        throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);\n      }\n      \n      const { uploadUrl } = await urlResponse.json();\n      onProgress?.(30);\n      \n      // Upload file to S3 with progress simulation\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        \n        xhr.upload.addEventListener('progress', (e) => {\n          if (e.lengthComputable) {\n            const progress = Math.round(30 + (e.loaded / e.total) * 70);\n            onProgress?.(progress);\n          }\n        });\n        \n        xhr.addEventListener('load', async () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            onProgress?.(100);\n            \n            // Wait 5 minutes then get results\n            setTimeout(async () => {\n              try {\n                const results = await this.getResults(file.name);\n                onStatusChange?.('completed', results);\n                this.statusChangeCallback?.('completed', results);\n              } catch (error) {\n                console.error('Error getting results after upload:', error);\n                onStatusChange?.('failed', null);\n                this.statusChangeCallback?.('failed', null);\n              }\n            }, 240000);\n            \n            resolve({ success: true, fileName: file.name, fileSize: file.size });\n          } else {\n            reject(new Error(`Failed to upload file with status: ${xhr.status}`));\n          }\n        });\n        \n        xhr.addEventListener('error', () => {\n          reject(new Error('Upload failed'));\n        });\n        \n        xhr.open('PUT', uploadUrl);\n        xhr.send(file);\n      });\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n\n  // Get results from API\n  async getResults(originalFileName) {\n    const fileName = `aggregated_${originalFileName.replace('.wav', '')}.json`;\n    //console.log(`Fetching results for fileName: ${fileName}`);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}get-results?fileName=${encodeURIComponent(fileName)}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to get results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      //console.log('Results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching results:', error.message);\n      throw error;\n    }\n  },\n\n  // Set status change callback\n  setStatusChangeCallback(callback) {\n    this.statusChangeCallback = callback;\n  },\n\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    //console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      //console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    //console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        //console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          //console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}