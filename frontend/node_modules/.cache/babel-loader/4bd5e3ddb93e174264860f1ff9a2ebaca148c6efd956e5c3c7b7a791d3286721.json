{"ast":null,"code":"const API_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/get-data';\n\n// List of specializations to randomly assign\nconst specializations = ['Customer Service', 'Technical Support', 'Sales'];\n\n// Helper function to get random specialization\nconst getRandomSpecialization = () => {\n  const randomIndex = Math.floor(Math.random() * specializations.length);\n  return specializations[randomIndex];\n};\n\n// Process agent data from API response\nconst processAgentData = data => {\n  // Group by counselorId\n  const counselorGroups = {};\n  data.forEach(entry => {\n    const {\n      CounselorId,\n      CounselorName,\n      PercentageScore\n    } = entry;\n    if (!counselorGroups[CounselorId]) {\n      counselorGroups[CounselorId] = {\n        name: CounselorName,\n        contactId: CounselorId,\n        specialization: getRandomSpecialization(),\n        totalCases: 0,\n        evaluations: []\n      };\n    }\n    counselorGroups[CounselorId].totalCases += 1;\n    counselorGroups[CounselorId].evaluations.push({\n      fileName: entry.AudioFileName,\n      date: new Date(entry.EvaluationDate).toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      }),\n      score: `${Math.round(entry.PercentageScore)} / 100`,\n      categoryScores: entry.CategoryScores\n    });\n  });\n\n  // Convert to array\n  return Object.values(counselorGroups);\n};\n\n// Fetch all agents data\nconst getAllAgents = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data);\n    const processedData = processAgentData(data);\n    console.log('Processed Agent Data:', processedData);\n    return processedData;\n  } catch (error) {\n    console.error('Error fetching agent data:', error);\n    return [];\n  }\n};\n\n// Get a specific agent by ID\nconst getAgentById = async agentId => {\n  try {\n    const allAgents = await getAllAgents();\n    return allAgents.find(agent => agent.contactId === agentId) || null;\n  } catch (error) {\n    console.error(`Error fetching agent with ID ${agentId}:`, error);\n    return null;\n  }\n};\nexport const agentService = {\n  getAllAgents,\n  getAgentById\n};","map":{"version":3,"names":["API_URL","specializations","getRandomSpecialization","randomIndex","Math","floor","random","length","processAgentData","data","counselorGroups","forEach","entry","CounselorId","CounselorName","PercentageScore","name","contactId","specialization","totalCases","evaluations","push","fileName","AudioFileName","date","Date","EvaluationDate","toLocaleDateString","month","day","year","score","round","categoryScores","CategoryScores","Object","values","getAllAgents","response","fetch","ok","Error","status","json","console","log","processedData","error","getAgentById","agentId","allAgents","find","agent","agentService"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/agentService.js"],"sourcesContent":["const API_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/get-data';\n\n// List of specializations to randomly assign\nconst specializations = ['Customer Service', 'Technical Support', 'Sales'];\n\n// Helper function to get random specialization\nconst getRandomSpecialization = () => {\n  const randomIndex = Math.floor(Math.random() * specializations.length);\n  return specializations[randomIndex];\n};\n\n// Process agent data from API response\nconst processAgentData = (data) => {\n  // Group by counselorId\n  const counselorGroups = {};\n  \n  data.forEach(entry => {\n    const { CounselorId, CounselorName, PercentageScore } = entry;\n    \n    if (!counselorGroups[CounselorId]) {\n      counselorGroups[CounselorId] = {\n        name: CounselorName,\n        contactId: CounselorId,\n        specialization: getRandomSpecialization(),\n        totalCases: 0,\n        evaluations: []\n      };\n    }\n    \n    counselorGroups[CounselorId].totalCases += 1;\n    counselorGroups[CounselorId].evaluations.push({\n      fileName: entry.AudioFileName,\n      date: new Date(entry.EvaluationDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),\n      score: `${Math.round(entry.PercentageScore)} / 100`,\n      categoryScores: entry.CategoryScores\n    });\n  });\n  \n  // Convert to array\n  return Object.values(counselorGroups);\n};\n\n// Fetch all agents data\nconst getAllAgents = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data);\n    \n    const processedData = processAgentData(data);\n    console.log('Processed Agent Data:', processedData);\n    \n    return processedData;\n  } catch (error) {\n    console.error('Error fetching agent data:', error);\n    return [];\n  }\n};\n\n// Get a specific agent by ID\nconst getAgentById = async (agentId) => {\n  try {\n    const allAgents = await getAllAgents();\n    return allAgents.find(agent => agent.contactId === agentId) || null;\n  } catch (error) {\n    console.error(`Error fetching agent with ID ${agentId}:`, error);\n    return null;\n  }\n};\n\nexport const agentService = {\n  getAllAgents,\n  getAgentById\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}