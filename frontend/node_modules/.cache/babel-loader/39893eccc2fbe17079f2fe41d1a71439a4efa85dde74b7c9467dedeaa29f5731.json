{"ast":null,"code":"// Service for handling file uploads and API communication\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\nexport const uploadService = {\n  // Upload file to server\n  async uploadFile(file) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      console.log(`Sending request to: ${API_BASE_URL}/generate-url`);\n      const response = await fetch(`${API_BASE_URL}/generate-url`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        console.error(`Upload failed with status: ${response.status}`);\n        throw new Error(`Upload failed with status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('Upload successful:', result);\n      return result;\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise(resolve => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AWS_REGION","REACT_APP_AWS_REGION","API_KEY","REACT_APP_AWS_API_KEY","uploadService","uploadFile","file","console","log","name","size","formData","FormData","append","response","fetch","method","body","ok","error","status","Error","result","json","message","getAnalysisResults","fileId","headers","results","simulateUpload","onProgress","Promise","resolve","progress","interval","setInterval","clearInterval","success","Date","now","toString","fileName","fileSize"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/uploadService.js"],"sourcesContent":["// Service for handling file uploads and API communication\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\n\nexport const uploadService = {\n  // Upload file to server\n  async uploadFile(file) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    try {\n      console.log(`Sending request to: ${API_BASE_URL}/generate-url`);\n      const response = await fetch(`${API_BASE_URL}/generate-url`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        console.error(`Upload failed with status: ${response.status}`);\n        throw new Error(`Upload failed with status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      console.log('Upload successful:', result);\n      return result;\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}