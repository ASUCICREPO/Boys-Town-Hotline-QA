{"ast":null,"code":"const API_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/get-data';\n\n// List of specializations to randomly assign\nconst specializations = ['National Hotline Program', 'Nebraska Crisis Program'];\n\n// Helper function to get random specialization\nconst getRandomSpecialization = () => {\n  const randomIndex = Math.floor(Math.random() * specializations.length);\n  return specializations[randomIndex];\n};\n\n// Process agent data from API response\nconst processAgentData = data => {\n  // Group by counselorId\n  const counselorGroups = {};\n  data.forEach(entry => {\n    const {\n      CounselorId,\n      CounselorName,\n      PercentageScore,\n      EvaluationDate\n    } = entry;\n    const evalDate = new Date(EvaluationDate);\n    const isFirstHalf = evalDate.getMonth() < 6; // First half: Jan-Jun, Second half: Jul-Dec\n\n    if (!counselorGroups[CounselorId]) {\n      counselorGroups[CounselorId] = {\n        name: CounselorName,\n        contactId: CounselorId,\n        specialization: getRandomSpecialization(),\n        totalCases: 0,\n        evaluations: [],\n        firstHalfScores: [],\n        secondHalfScores: []\n      };\n    }\n    counselorGroups[CounselorId].totalCases += 1;\n\n    // Add score to appropriate half-year array\n    if (isFirstHalf) {\n      counselorGroups[CounselorId].firstHalfScores.push(PercentageScore);\n    } else {\n      counselorGroups[CounselorId].secondHalfScores.push(PercentageScore);\n    }\n    counselorGroups[CounselorId].evaluations.push({\n      fileName: entry.AudioFileName,\n      date: new Date(EvaluationDate).toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      }),\n      score: `${Math.round(PercentageScore)} / 100`,\n      categoryScores: entry.CategoryScores\n    });\n  });\n\n  // Calculate half-year averages\n  Object.values(counselorGroups).forEach(agent => {\n    // Calculate first half average\n    if (agent.firstHalfScores.length > 0) {\n      const sum = agent.firstHalfScores.reduce((acc, score) => acc + score, 0);\n      agent.firstHalfAvg = Math.round(sum / agent.firstHalfScores.length);\n    } else {\n      agent.firstHalfAvg = 'N/A';\n    }\n\n    // Calculate second half average\n    if (agent.secondHalfScores.length > 0) {\n      const sum = agent.secondHalfScores.reduce((acc, score) => acc + score, 0);\n      agent.secondHalfAvg = Math.round(sum / agent.secondHalfScores.length);\n    } else {\n      agent.secondHalfAvg = 'N/A';\n    }\n\n    // Clean up temporary arrays\n    delete agent.firstHalfScores;\n    delete agent.secondHalfScores;\n  });\n\n  // Convert to array\n  return Object.values(counselorGroups);\n};\n\n// Fetch all agents data\nconst getAllAgents = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data);\n    const processedData = processAgentData(data);\n    console.log('Processed Agent Data:', processedData);\n    return processedData;\n  } catch (error) {\n    console.error('Error fetching agent data:', error);\n    return [];\n  }\n};\n\n// Get a specific agent by ID\nconst getAgentById = async agentId => {\n  try {\n    const allAgents = await getAllAgents();\n    return allAgents.find(agent => agent.contactId === agentId) || null;\n  } catch (error) {\n    console.error(`Error fetching agent with ID ${agentId}:`, error);\n    return null;\n  }\n};\nexport const agentService = {\n  getAllAgents,\n  getAgentById\n};","map":{"version":3,"names":["API_URL","specializations","getRandomSpecialization","randomIndex","Math","floor","random","length","processAgentData","data","counselorGroups","forEach","entry","CounselorId","CounselorName","PercentageScore","EvaluationDate","evalDate","Date","isFirstHalf","getMonth","name","contactId","specialization","totalCases","evaluations","firstHalfScores","secondHalfScores","push","fileName","AudioFileName","date","toLocaleDateString","month","day","year","score","round","categoryScores","CategoryScores","Object","values","agent","sum","reduce","acc","firstHalfAvg","secondHalfAvg","getAllAgents","response","fetch","ok","Error","status","json","console","log","processedData","error","getAgentById","agentId","allAgents","find","agentService"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/agentService.js"],"sourcesContent":["const API_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/get-data';\n\n// List of specializations to randomly assign\nconst specializations = ['National Hotline Program', 'Nebraska Crisis Program'];\n\n// Helper function to get random specialization\nconst getRandomSpecialization = () => {\n  const randomIndex = Math.floor(Math.random() * specializations.length);\n  return specializations[randomIndex];\n};\n\n// Process agent data from API response\nconst processAgentData = (data) => {\n  // Group by counselorId\n  const counselorGroups = {};\n  \n  data.forEach(entry => {\n    const { CounselorId, CounselorName, PercentageScore, EvaluationDate } = entry;\n    const evalDate = new Date(EvaluationDate);\n    const isFirstHalf = evalDate.getMonth() < 6; // First half: Jan-Jun, Second half: Jul-Dec\n    \n    if (!counselorGroups[CounselorId]) {\n      counselorGroups[CounselorId] = {\n        name: CounselorName,\n        contactId: CounselorId,\n        specialization: getRandomSpecialization(),\n        totalCases: 0,\n        evaluations: [],\n        firstHalfScores: [],\n        secondHalfScores: []\n      };\n    }\n    \n    counselorGroups[CounselorId].totalCases += 1;\n    \n    // Add score to appropriate half-year array\n    if (isFirstHalf) {\n      counselorGroups[CounselorId].firstHalfScores.push(PercentageScore);\n    } else {\n      counselorGroups[CounselorId].secondHalfScores.push(PercentageScore);\n    }\n    \n    counselorGroups[CounselorId].evaluations.push({\n      fileName: entry.AudioFileName,\n      date: new Date(EvaluationDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),\n      score: `${Math.round(PercentageScore)} / 100`,\n      categoryScores: entry.CategoryScores\n    });\n  });\n  \n  // Calculate half-year averages\n  Object.values(counselorGroups).forEach(agent => {\n    // Calculate first half average\n    if (agent.firstHalfScores.length > 0) {\n      const sum = agent.firstHalfScores.reduce((acc, score) => acc + score, 0);\n      agent.firstHalfAvg = Math.round(sum / agent.firstHalfScores.length);\n    } else {\n      agent.firstHalfAvg = 'N/A';\n    }\n    \n    // Calculate second half average\n    if (agent.secondHalfScores.length > 0) {\n      const sum = agent.secondHalfScores.reduce((acc, score) => acc + score, 0);\n      agent.secondHalfAvg = Math.round(sum / agent.secondHalfScores.length);\n    } else {\n      agent.secondHalfAvg = 'N/A';\n    }\n    \n    // Clean up temporary arrays\n    delete agent.firstHalfScores;\n    delete agent.secondHalfScores;\n  });\n  \n  // Convert to array\n  return Object.values(counselorGroups);\n};\n\n// Fetch all agents data\nconst getAllAgents = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data);\n    \n    const processedData = processAgentData(data);\n    console.log('Processed Agent Data:', processedData);\n    \n    return processedData;\n  } catch (error) {\n    console.error('Error fetching agent data:', error);\n    return [];\n  }\n};\n\n// Get a specific agent by ID\nconst getAgentById = async (agentId) => {\n  try {\n    const allAgents = await getAllAgents();\n    return allAgents.find(agent => agent.contactId === agentId) || null;\n  } catch (error) {\n    console.error(`Error fetching agent with ID ${agentId}:`, error);\n    return null;\n  }\n};\n\nexport const agentService = {\n  getAllAgents,\n  getAgentById\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}