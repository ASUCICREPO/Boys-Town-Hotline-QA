{"ast":null,"code":"// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\nexport const uploadService = {\n  // Upload file to S3 using presigned URL\n  async uploadFile(file, onProgress) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    try {\n      // Get presigned URL\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(10);\n      const urlResponse = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      if (!urlResponse.ok) {\n        throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);\n      }\n      const {\n        uploadUrl\n      } = await urlResponse.json();\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(30);\n\n      // Upload file to S3 with progress simulation\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.upload.addEventListener('progress', e => {\n          if (e.lengthComputable) {\n            const progress = Math.round(30 + e.loaded / e.total * 70);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(progress);\n          }\n        });\n        xhr.addEventListener('load', async () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(100);\n\n            // Wait 1000ms then get results\n            setTimeout(async () => {\n              try {\n                await this.getResults(file.name);\n              } catch (error) {\n                console.error('Error getting results after upload:', error);\n              }\n            }, 10000);\n            resolve({\n              success: true,\n              fileName: file.name,\n              fileSize: file.size\n            });\n          } else {\n            reject(new Error(`Failed to upload file with status: ${xhr.status}`));\n          }\n        });\n        xhr.addEventListener('error', () => {\n          reject(new Error('Upload failed'));\n        });\n        xhr.open('PUT', uploadUrl);\n        xhr.send(file);\n      });\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n  // Get results from API\n  async getResults(originalFileName) {\n    const fileName = `aggregated_${originalFileName.replace('.wav', '')}.json`;\n    console.log(`Fetching results for fileName: ${fileName}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}get-results?fileName=${encodeURIComponent(fileName)}`);\n      if (!response.ok) {\n        throw new Error(`Failed to get results. Status: ${response.status}`);\n      }\n      const results = await response.json();\n      console.log('Results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching results:', error.message);\n      throw error;\n    }\n  },\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise(resolve => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","AWS_REGION","process","env","REACT_APP_AWS_REGION","API_KEY","REACT_APP_AWS_API_KEY","uploadService","uploadFile","file","onProgress","console","log","name","size","urlResponse","fetch","method","headers","body","JSON","stringify","fileName","fileType","type","ok","Error","status","uploadUrl","json","Promise","resolve","reject","xhr","XMLHttpRequest","upload","addEventListener","e","lengthComputable","progress","Math","round","loaded","total","setTimeout","getResults","error","success","fileSize","open","send","message","originalFileName","replace","response","encodeURIComponent","results","getAnalysisResults","fileId","simulateUpload","interval","setInterval","clearInterval","result","Date","now","toString"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/uploadService.js"],"sourcesContent":["// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\n\nexport const uploadService = {\n  // Upload file to S3 using presigned URL\n  async uploadFile(file, onProgress) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    \n    try {\n      // Get presigned URL\n      onProgress?.(10);\n      const urlResponse = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      \n      if (!urlResponse.ok) {\n        throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);\n      }\n      \n      const { uploadUrl } = await urlResponse.json();\n      onProgress?.(30);\n      \n      // Upload file to S3 with progress simulation\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        \n        xhr.upload.addEventListener('progress', (e) => {\n          if (e.lengthComputable) {\n            const progress = Math.round(30 + (e.loaded / e.total) * 70);\n            onProgress?.(progress);\n          }\n        });\n        \n        xhr.addEventListener('load', async () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            onProgress?.(100);\n            \n            // Wait 1000ms then get results\n            setTimeout(async () => {\n              try {\n                await this.getResults(file.name);\n              } catch (error) {\n                console.error('Error getting results after upload:', error);\n              }\n            }, 10000);\n            \n            resolve({ success: true, fileName: file.name, fileSize: file.size });\n          } else {\n            reject(new Error(`Failed to upload file with status: ${xhr.status}`));\n          }\n        });\n        \n        xhr.addEventListener('error', () => {\n          reject(new Error('Upload failed'));\n        });\n        \n        xhr.open('PUT', uploadUrl);\n        xhr.send(file);\n      });\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n\n  // Get results from API\n  async getResults(originalFileName) {\n    const fileName = `aggregated_${originalFileName.replace('.wav', '')}.json`;\n    console.log(`Fetching results for fileName: ${fileName}`);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}get-results?fileName=${encodeURIComponent(fileName)}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to get results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching results:', error.message);\n      throw error;\n    }\n  },\n\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG,8DAA8D;AACnF,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AACnD,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAG,CAACG,qBAAqB;AAEjD,OAAO,MAAMC,aAAa,GAAG;EAC3B;EACA,MAAMC,UAAUA,CAACC,IAAI,EAAEC,UAAU,EAAE;IACjCC,OAAO,CAACC,GAAG,CAAC,6BAA6BH,IAAI,CAACI,IAAI,KAAKJ,IAAI,CAACK,IAAI,SAAS,CAAC;IAE1E,IAAI;MACF;MACAJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,EAAE,CAAC;MAChB,MAAMK,WAAW,GAAG,MAAMC,KAAK,CAAC,GAAGhB,YAAY,cAAc,EAAE;QAC7DiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAEb,IAAI,CAACI,IAAI;UACnBU,QAAQ,EAAEd,IAAI,CAACe;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACT,WAAW,CAACU,EAAE,EAAE;QACnB,MAAM,IAAIC,KAAK,CAAC,4CAA4CX,WAAW,CAACY,MAAM,EAAE,CAAC;MACnF;MAEA,MAAM;QAAEC;MAAU,CAAC,GAAG,MAAMb,WAAW,CAACc,IAAI,CAAC,CAAC;MAC9CnB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,EAAE,CAAC;;MAEhB;MACA,OAAO,IAAIoB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,MAAMC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;QAEhCD,GAAG,CAACE,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAGC,CAAC,IAAK;UAC7C,IAAIA,CAAC,CAACC,gBAAgB,EAAE;YACtB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAC,EAAE,GAAIJ,CAAC,CAACK,MAAM,GAAGL,CAAC,CAACM,KAAK,GAAI,EAAE,CAAC;YAC3DjC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG6B,QAAQ,CAAC;UACxB;QACF,CAAC,CAAC;QAEFN,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAE,YAAY;UACvC,IAAIH,GAAG,CAACN,MAAM,IAAI,GAAG,IAAIM,GAAG,CAACN,MAAM,GAAG,GAAG,EAAE;YACzCjB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG,GAAG,CAAC;;YAEjB;YACAkC,UAAU,CAAC,YAAY;cACrB,IAAI;gBACF,MAAM,IAAI,CAACC,UAAU,CAACpC,IAAI,CAACI,IAAI,CAAC;cAClC,CAAC,CAAC,OAAOiC,KAAK,EAAE;gBACdnC,OAAO,CAACmC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;cAC7D;YACF,CAAC,EAAE,KAAK,CAAC;YAETf,OAAO,CAAC;cAAEgB,OAAO,EAAE,IAAI;cAAEzB,QAAQ,EAAEb,IAAI,CAACI,IAAI;cAAEmC,QAAQ,EAAEvC,IAAI,CAACK;YAAK,CAAC,CAAC;UACtE,CAAC,MAAM;YACLkB,MAAM,CAAC,IAAIN,KAAK,CAAC,sCAAsCO,GAAG,CAACN,MAAM,EAAE,CAAC,CAAC;UACvE;QACF,CAAC,CAAC;QAEFM,GAAG,CAACG,gBAAgB,CAAC,OAAO,EAAE,MAAM;UAClCJ,MAAM,CAAC,IAAIN,KAAK,CAAC,eAAe,CAAC,CAAC;QACpC,CAAC,CAAC;QAEFO,GAAG,CAACgB,IAAI,CAAC,KAAK,EAAErB,SAAS,CAAC;QAC1BK,GAAG,CAACiB,IAAI,CAACzC,IAAI,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOqC,KAAK,EAAE;MACdnC,OAAO,CAACmC,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACK,OAAO,CAAC;MAC7C,MAAML,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMD,UAAUA,CAACO,gBAAgB,EAAE;IACjC,MAAM9B,QAAQ,GAAG,cAAc8B,gBAAgB,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO;IAC1E1C,OAAO,CAACC,GAAG,CAAC,kCAAkCU,QAAQ,EAAE,CAAC;IAEzD,IAAI;MACF,MAAMgC,QAAQ,GAAG,MAAMtC,KAAK,CAAC,GAAGhB,YAAY,wBAAwBuD,kBAAkB,CAACjC,QAAQ,CAAC,EAAE,CAAC;MAEnG,IAAI,CAACgC,QAAQ,CAAC7B,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC4B,QAAQ,CAAC3B,MAAM,EAAE,CAAC;MACtE;MAEA,MAAM6B,OAAO,GAAG,MAAMF,QAAQ,CAACzB,IAAI,CAAC,CAAC;MACrClB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE4C,OAAO,CAAC;MACvD,OAAOA,OAAO;IAChB,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdnC,OAAO,CAACmC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACK,OAAO,CAAC;MACvD,MAAML,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMW,kBAAkBA,CAACC,MAAM,EAAE;IAC/B/C,OAAO,CAACC,GAAG,CAAC,yCAAyC8C,MAAM,EAAE,CAAC;IAC9D,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMtC,KAAK,CAAC,GAAGhB,YAAY,aAAa0D,MAAM,EAAE,EAAE;QACjExC,OAAO,EAAE;UACP,WAAW,EAAEb;QACf;MACF,CAAC,CAAC;MAEF,IAAI,CAACiD,QAAQ,CAAC7B,EAAE,EAAE;QAChBd,OAAO,CAACmC,KAAK,CAAC,2CAA2CQ,QAAQ,CAAC3B,MAAM,EAAE,CAAC;QAC3E,MAAM,IAAID,KAAK,CAAC,2CAA2C4B,QAAQ,CAAC3B,MAAM,EAAE,CAAC;MAC/E;MAEA,MAAM6B,OAAO,GAAG,MAAMF,QAAQ,CAACzB,IAAI,CAAC,CAAC;MACrClB,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE4C,OAAO,CAAC;MAChE,OAAOA,OAAO;IAChB,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdnC,OAAO,CAACmC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACK,OAAO,CAAC;MAChE,MAAML,KAAK;IACb;EACF,CAAC;EAED;EACAa,cAAcA,CAAClD,IAAI,EAAEC,UAAU,EAAE;IAC/BC,OAAO,CAACC,GAAG,CAAC,+BAA+BH,IAAI,CAACI,IAAI,KAAKJ,IAAI,CAACK,IAAI,SAAS,CAAC;IAC5E,OAAO,IAAIgB,OAAO,CAAEC,OAAO,IAAK;MAC9B,IAAIQ,QAAQ,GAAG,CAAC;MAChB,MAAMqB,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCtB,QAAQ,IAAI,EAAE;QACd5B,OAAO,CAACC,GAAG,CAAC,oBAAoB2B,QAAQ,GAAG,CAAC;QAC5C7B,UAAU,CAAC6B,QAAQ,CAAC;QAEpB,IAAIA,QAAQ,IAAI,GAAG,EAAE;UACnBuB,aAAa,CAACF,QAAQ,CAAC;UACvB,MAAMG,MAAM,GAAG;YACbhB,OAAO,EAAE,IAAI;YACbW,MAAM,EAAEM,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;YAC7B5C,QAAQ,EAAEb,IAAI,CAACI,IAAI;YACnBmC,QAAQ,EAAEvC,IAAI,CAACK;UACjB,CAAC;UACDH,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEmD,MAAM,CAAC;UACjDhC,OAAO,CAACgC,MAAM,CAAC;QACjB;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}