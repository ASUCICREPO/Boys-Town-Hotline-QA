{"ast":null,"code":"// Service for handling file uploads and API communication\nconst API_BASE_URL='https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';const AWS_REGION=process.env.REACT_APP_AWS_REGION;const API_KEY=process.env.REACT_APP_AWS_API_KEY;export const uploadService={// Upload file to S3 using presigned URL\nasync uploadFile(file,onProgress,onStatusChange){console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);try{// Get presigned URL\nonProgress===null||onProgress===void 0?void 0:onProgress(10);const urlResponse=await fetch(`${API_BASE_URL}generate-url`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({fileName:file.name,fileType:file.type})});if(!urlResponse.ok){throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);}const{uploadUrl}=await urlResponse.json();onProgress===null||onProgress===void 0?void 0:onProgress(30);// Upload file to S3 with progress simulation\nreturn new Promise((resolve,reject)=>{const xhr=new XMLHttpRequest();xhr.upload.addEventListener('progress',e=>{if(e.lengthComputable){const progress=Math.round(30+e.loaded/e.total*70);onProgress===null||onProgress===void 0?void 0:onProgress(progress);}});xhr.addEventListener('load',async()=>{if(xhr.status>=200&&xhr.status<300){onProgress===null||onProgress===void 0?void 0:onProgress(100);// Wait 5 minutes then get results\nsetTimeout(async()=>{try{var _this$statusChangeCal;const results=await this.getResults(file.name);onStatusChange===null||onStatusChange===void 0?void 0:onStatusChange('completed',results);(_this$statusChangeCal=this.statusChangeCallback)===null||_this$statusChangeCal===void 0?void 0:_this$statusChangeCal.call(this,'completed',results);}catch(error){var _this$statusChangeCal2;console.error('Error getting results after upload:',error);onStatusChange===null||onStatusChange===void 0?void 0:onStatusChange('failed',null);(_this$statusChangeCal2=this.statusChangeCallback)===null||_this$statusChangeCal2===void 0?void 0:_this$statusChangeCal2.call(this,'failed',null);}},240000);resolve({success:true,fileName:file.name,fileSize:file.size});}else{reject(new Error(`Failed to upload file with status: ${xhr.status}`));}});xhr.addEventListener('error',()=>{reject(new Error('Upload failed'));});xhr.open('PUT',uploadUrl);xhr.send(file);});}catch(error){console.error('Upload error:',error.message);throw error;}},// Get results from API\nasync getResults(originalFileName){const fileName=`aggregated_${originalFileName.replace('.wav','')}.json`;console.log(`Fetching results for fileName: ${fileName}`);try{const response=await fetch(`${API_BASE_URL}get-results?fileName=${encodeURIComponent(fileName)}`);if(!response.ok){throw new Error(`Failed to get results. Status: ${response.status}`);}const results=await response.json();console.log('Results retrieved successfully:',results);return results;}catch(error){console.error('Error fetching results:',error.message);throw error;}},// Set status change callback\nsetStatusChangeCallback(callback){this.statusChangeCallback=callback;},// Get analysis results\nasync getAnalysisResults(fileId){console.log(`Fetching analysis results for fileId: ${fileId}`);try{const response=await fetch(`${API_BASE_URL}/analysis/${fileId}`,{headers:{'x-api-key':API_KEY}});if(!response.ok){console.error(`Failed to get analysis results. Status: ${response.status}`);throw new Error(`Failed to get analysis results. Status: ${response.status}`);}const results=await response.json();console.log('Analysis results retrieved successfully:',results);return results;}catch(error){console.error('Error fetching analysis results:',error.message);throw error;}},// Simulate upload progress (for demo purposes)\nsimulateUpload(file,onProgress){console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);return new Promise(resolve=>{let progress=0;const interval=setInterval(()=>{progress+=10;console.log(`Upload progress: ${progress}%`);onProgress(progress);if(progress>=100){clearInterval(interval);const result={success:true,fileId:Date.now().toString(),fileName:file.name,fileSize:file.size};console.log('Simulated upload complete:',result);resolve(result);}},200);});}};","map":{"version":3,"names":["API_BASE_URL","AWS_REGION","process","env","REACT_APP_AWS_REGION","API_KEY","REACT_APP_AWS_API_KEY","uploadService","uploadFile","file","onProgress","onStatusChange","console","log","name","size","urlResponse","fetch","method","headers","body","JSON","stringify","fileName","fileType","type","ok","Error","status","uploadUrl","json","Promise","resolve","reject","xhr","XMLHttpRequest","upload","addEventListener","e","lengthComputable","progress","Math","round","loaded","total","setTimeout","_this$statusChangeCal","results","getResults","statusChangeCallback","call","error","_this$statusChangeCal2","success","fileSize","open","send","message","originalFileName","replace","response","encodeURIComponent","setStatusChangeCallback","callback","getAnalysisResults","fileId","simulateUpload","interval","setInterval","clearInterval","result","Date","now","toString"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/uploadService.js"],"sourcesContent":["// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\n\nexport const uploadService = {\n  // Upload file to S3 using presigned URL\n  async uploadFile(file, onProgress, onStatusChange) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    \n    try {\n      // Get presigned URL\n      onProgress?.(10);\n      const urlResponse = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      \n      if (!urlResponse.ok) {\n        throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);\n      }\n      \n      const { uploadUrl } = await urlResponse.json();\n      onProgress?.(30);\n      \n      // Upload file to S3 with progress simulation\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        \n        xhr.upload.addEventListener('progress', (e) => {\n          if (e.lengthComputable) {\n            const progress = Math.round(30 + (e.loaded / e.total) * 70);\n            onProgress?.(progress);\n          }\n        });\n        \n        xhr.addEventListener('load', async () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            onProgress?.(100);\n            \n            // Wait 5 minutes then get results\n            setTimeout(async () => {\n              try {\n                const results = await this.getResults(file.name);\n                onStatusChange?.('completed', results);\n                this.statusChangeCallback?.('completed', results);\n              } catch (error) {\n                console.error('Error getting results after upload:', error);\n                onStatusChange?.('failed', null);\n                this.statusChangeCallback?.('failed', null);\n              }\n            }, 240000);\n            \n            resolve({ success: true, fileName: file.name, fileSize: file.size });\n          } else {\n            reject(new Error(`Failed to upload file with status: ${xhr.status}`));\n          }\n        });\n        \n        xhr.addEventListener('error', () => {\n          reject(new Error('Upload failed'));\n        });\n        \n        xhr.open('PUT', uploadUrl);\n        xhr.send(file);\n      });\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n\n  // Get results from API\n  async getResults(originalFileName) {\n    const fileName = `aggregated_${originalFileName.replace('.wav', '')}.json`;\n    console.log(`Fetching results for fileName: ${fileName}`);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}get-results?fileName=${encodeURIComponent(fileName)}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to get results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching results:', error.message);\n      throw error;\n    }\n  },\n\n  // Set status change callback\n  setStatusChangeCallback(callback) {\n    this.statusChangeCallback = callback;\n  },\n\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}