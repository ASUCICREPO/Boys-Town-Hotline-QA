{"ast":null,"code":"// Service for handling file uploads and API communication\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:3001/api';const AWS_REGION=process.env.REACT_APP_AWS_REGION;const API_KEY=process.env.REACT_APP_AWS_API_KEY;export const uploadService={// Upload file to server\nasync uploadFile(file){console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);const formData=new FormData();formData.append('file',file);try{console.log(`Sending request to: ${API_BASE_URL}/upload-audio`);const response=await fetch(`${API_BASE_URL}/upload-audio`,{method:'POST',body:formData});if(!response.ok){console.error(`Upload failed with status: ${response.status}`);throw new Error(`Upload failed with status: ${response.status}`);}const result=await response.json();console.log('Upload successful:',result);return result;}catch(error){console.error('Upload error:',error.message);throw error;}},// Get analysis results\nasync getAnalysisResults(fileId){console.log(`Fetching analysis results for fileId: ${fileId}`);try{const response=await fetch(`${API_BASE_URL}/analysis/${fileId}`,{headers:{'x-api-key':API_KEY}});if(!response.ok){console.error(`Failed to get analysis results. Status: ${response.status}`);throw new Error(`Failed to get analysis results. Status: ${response.status}`);}const results=await response.json();console.log('Analysis results retrieved successfully:',results);return results;}catch(error){console.error('Error fetching analysis results:',error.message);throw error;}},// Simulate upload progress (for demo purposes)\nsimulateUpload(file,onProgress){console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);return new Promise(resolve=>{let progress=0;const interval=setInterval(()=>{progress+=10;console.log(`Upload progress: ${progress}%`);onProgress(progress);if(progress>=100){clearInterval(interval);const result={success:true,fileId:Date.now().toString(),fileName:file.name,fileSize:file.size};console.log('Simulated upload complete:',result);resolve(result);}},200);});}};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AWS_REGION","REACT_APP_AWS_REGION","API_KEY","REACT_APP_AWS_API_KEY","uploadService","uploadFile","file","console","log","name","size","formData","FormData","append","response","fetch","method","body","ok","error","status","Error","result","json","message","getAnalysisResults","fileId","headers","results","simulateUpload","onProgress","Promise","resolve","progress","interval","setInterval","clearInterval","success","Date","now","toString","fileName","fileSize"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/uploadService.js"],"sourcesContent":["// Service for handling file uploads and API communication\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\n\nexport const uploadService = {\n  // Upload file to server\n  async uploadFile(file) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    try {\n      console.log(`Sending request to: ${API_BASE_URL}/upload-audio`);\n      const response = await fetch(`${API_BASE_URL}/upload-audio`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        console.error(`Upload failed with status: ${response.status}`);\n        throw new Error(`Upload failed with status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      console.log('Upload successful:', result);\n      return result;\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}