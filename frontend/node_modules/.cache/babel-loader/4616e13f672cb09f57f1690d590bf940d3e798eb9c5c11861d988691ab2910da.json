{"ast":null,"code":"// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\nexport const uploadService = {\n  // Get presigned URL for file upload\n  async uploadFile(file) {\n    console.log(`Getting presigned URL for file: ${file.name} (${file.size} bytes)`);\n    try {\n      console.log(`Sending request to: ${API_BASE_URL}generate-url`);\n      const response = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      if (!response.ok) {\n        console.error(`Failed to get presigned URL with status: ${response.status}`);\n        throw new Error(`Failed to get presigned URL with status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('Presigned URL retrieved successfully:', result);\n      return result;\n    } catch (error) {\n      console.error('Error getting presigned URL:', error.message);\n      throw error;\n    }\n  },\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise(resolve => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","AWS_REGION","process","env","REACT_APP_AWS_REGION","API_KEY","REACT_APP_AWS_API_KEY","uploadService","uploadFile","file","console","log","name","size","response","fetch","method","headers","body","JSON","stringify","fileName","fileType","type","ok","error","status","Error","result","json","message","getAnalysisResults","fileId","results","simulateUpload","onProgress","Promise","resolve","progress","interval","setInterval","clearInterval","success","Date","now","toString","fileSize"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/uploadService.js"],"sourcesContent":["// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\n\nexport const uploadService = {\n  // Get presigned URL for file upload\n  async uploadFile(file) {\n    console.log(`Getting presigned URL for file: ${file.name} (${file.size} bytes)`);\n    \n    try {\n      console.log(`Sending request to: ${API_BASE_URL}generate-url`);\n      const response = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get presigned URL with status: ${response.status}`);\n        throw new Error(`Failed to get presigned URL with status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      console.log('Presigned URL retrieved successfully:', result);\n      return result;\n    } catch (error) {\n      console.error('Error getting presigned URL:', error.message);\n      throw error;\n    }\n  },\n\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}