{"ast":null,"code":"// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\nexport const uploadService = {\n  // Upload file to S3 using presigned URL\n  async uploadFile(file) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    try {\n      // Get presigned URL\n      const urlResponse = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      if (!urlResponse.ok) {\n        throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);\n      }\n      const {\n        uploadUrl\n      } = await urlResponse.json();\n\n      // Upload file to S3\n      const uploadResponse = await fetch(uploadUrl, {\n        method: 'PUT',\n        body: file\n      });\n      if (!uploadResponse.ok) {\n        throw new Error(`Failed to upload file with status: ${uploadResponse.status}`);\n      }\n      console.log('File uploaded successfully to S3');\n      return {\n        success: true,\n        fileName: file.name,\n        fileSize: file.size\n      };\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise(resolve => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","AWS_REGION","process","env","REACT_APP_AWS_REGION","API_KEY","REACT_APP_AWS_API_KEY","uploadService","uploadFile","file","console","log","name","size","urlResponse","fetch","method","headers","body","JSON","stringify","fileName","fileType","type","ok","Error","status","uploadUrl","json","uploadResponse","success","fileSize","error","message","getAnalysisResults","fileId","response","results","simulateUpload","onProgress","Promise","resolve","progress","interval","setInterval","clearInterval","result","Date","now","toString"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/uploadService.js"],"sourcesContent":["// Service for handling file uploads and API communication\n\nconst API_BASE_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/';\nconst AWS_REGION = process.env.REACT_APP_AWS_REGION;\nconst API_KEY = process.env.REACT_APP_AWS_API_KEY;\n\nexport const uploadService = {\n  // Upload file to S3 using presigned URL\n  async uploadFile(file) {\n    console.log(`Starting upload for file: ${file.name} (${file.size} bytes)`);\n    \n    try {\n      // Get presigned URL\n      const urlResponse = await fetch(`${API_BASE_URL}generate-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileType: file.type\n        })\n      });\n      \n      if (!urlResponse.ok) {\n        throw new Error(`Failed to get presigned URL with status: ${urlResponse.status}`);\n      }\n      \n      const { uploadUrl } = await urlResponse.json();\n      \n      // Upload file to S3\n      const uploadResponse = await fetch(uploadUrl, {\n        method: 'PUT',\n        body: file\n      });\n      \n      if (!uploadResponse.ok) {\n        throw new Error(`Failed to upload file with status: ${uploadResponse.status}`);\n      }\n      \n      console.log('File uploaded successfully to S3');\n      return { success: true, fileName: file.name, fileSize: file.size };\n    } catch (error) {\n      console.error('Upload error:', error.message);\n      throw error;\n    }\n  },\n\n  // Get analysis results\n  async getAnalysisResults(fileId) {\n    console.log(`Fetching analysis results for fileId: ${fileId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/analysis/${fileId}`, {\n        headers: {\n          'x-api-key': API_KEY\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(`Failed to get analysis results. Status: ${response.status}`);\n        throw new Error(`Failed to get analysis results. Status: ${response.status}`);\n      }\n      \n      const results = await response.json();\n      console.log('Analysis results retrieved successfully:', results);\n      return results;\n    } catch (error) {\n      console.error('Error fetching analysis results:', error.message);\n      throw error;\n    }\n  },\n\n  // Simulate upload progress (for demo purposes)\n  simulateUpload(file, onProgress) {\n    console.log(`Simulating upload for file: ${file.name} (${file.size} bytes)`);\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += 10;\n        console.log(`Upload progress: ${progress}%`);\n        onProgress(progress);\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          const result = {\n            success: true,\n            fileId: Date.now().toString(),\n            fileName: file.name,\n            fileSize: file.size\n          };\n          console.log('Simulated upload complete:', result);\n          resolve(result);\n        }\n      }, 200);\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}