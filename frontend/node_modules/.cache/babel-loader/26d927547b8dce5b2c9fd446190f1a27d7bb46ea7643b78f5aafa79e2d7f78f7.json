{"ast":null,"code":"const API_URL='https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/get-data';// List of specializations to randomly assign\nconst specializations=['National Hotline Program','Nebraska Crisis Program'];// Helper function to get random specialization\nconst getRandomSpecialization=()=>{const randomIndex=Math.floor(Math.random()*specializations.length);return specializations[randomIndex];};// Process agent data from API response\nconst processAgentData=data=>{// Group by counselorId\nconst counselorGroups={};data.forEach(entry=>{const{CounselorId,CounselorName,PercentageScore,EvaluationDate}=entry;const evalDate=new Date(EvaluationDate);const isFirstHalf=evalDate.getMonth()<6;// First half: Jan-Jun, Second half: Jul-Dec\nif(!counselorGroups[CounselorId]){counselorGroups[CounselorId]={name:CounselorName,contactId:CounselorId,specialization:getRandomSpecialization(),totalCases:0,evaluations:[],firstHalfScores:[],secondHalfScores:[]};}counselorGroups[CounselorId].totalCases+=1;// Add score to appropriate half-year array\nif(isFirstHalf){counselorGroups[CounselorId].firstHalfScores.push(PercentageScore);}else{counselorGroups[CounselorId].secondHalfScores.push(PercentageScore);}counselorGroups[CounselorId].evaluations.push({fileName:entry.AudioFileName,date:new Date(EvaluationDate).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'}),score:`${Math.round(PercentageScore)} / 100`,categoryScores:entry.CategoryScores});});// Calculate half-year averages\nObject.values(counselorGroups).forEach(agent=>{// Calculate first half average\nif(agent.firstHalfScores.length>0){const sum=agent.firstHalfScores.reduce((acc,score)=>acc+score,0);agent.firstHalfAvg=Math.round(sum/agent.firstHalfScores.length);}else{agent.firstHalfAvg='N/A';}// Calculate second half average\nif(agent.secondHalfScores.length>0){const sum=agent.secondHalfScores.reduce((acc,score)=>acc+score,0);agent.secondHalfAvg=Math.round(sum/agent.secondHalfScores.length);}else{agent.secondHalfAvg='N/A';}// Clean up temporary arrays\ndelete agent.firstHalfScores;delete agent.secondHalfScores;});// Convert to array\nreturn Object.values(counselorGroups);};// Fetch all agents data\nconst getAllAgents=async()=>{try{const response=await fetch(API_URL);if(!response.ok){throw new Error(`API request failed with status ${response.status}`);}const data=await response.json();console.log('API Response:',data);const processedData=processAgentData(data);console.log('Processed Agent Data:',processedData);return processedData;}catch(error){console.error('Error fetching agent data:',error);return[];}};// Get a specific agent by ID\nconst getAgentById=async agentId=>{try{const allAgents=await getAllAgents();return allAgents.find(agent=>agent.contactId===agentId)||null;}catch(error){console.error(`Error fetching agent with ID ${agentId}:`,error);return null;}};export const agentService={getAllAgents,getAgentById};","map":{"version":3,"names":["API_URL","specializations","getRandomSpecialization","randomIndex","Math","floor","random","length","processAgentData","data","counselorGroups","forEach","entry","CounselorId","CounselorName","PercentageScore","EvaluationDate","evalDate","Date","isFirstHalf","getMonth","name","contactId","specialization","totalCases","evaluations","firstHalfScores","secondHalfScores","push","fileName","AudioFileName","date","toLocaleDateString","month","day","year","score","round","categoryScores","CategoryScores","Object","values","agent","sum","reduce","acc","firstHalfAvg","secondHalfAvg","getAllAgents","response","fetch","ok","Error","status","json","console","log","processedData","error","getAgentById","agentId","allAgents","find","agentService"],"sources":["/Users/synamalhan/Desktop/CIC/boys-town/frontend/src/services/agentService.js"],"sourcesContent":["const API_URL = 'https://td86a455og.execute-api.us-east-1.amazonaws.com/prod/get-data';\n\n// List of specializations to randomly assign\nconst specializations = ['National Hotline Program', 'Nebraska Crisis Program'];\n\n// Helper function to get random specialization\nconst getRandomSpecialization = () => {\n  const randomIndex = Math.floor(Math.random() * specializations.length);\n  return specializations[randomIndex];\n};\n\n// Process agent data from API response\nconst processAgentData = (data) => {\n  // Group by counselorId\n  const counselorGroups = {};\n  \n  data.forEach(entry => {\n    const { CounselorId, CounselorName, PercentageScore, EvaluationDate } = entry;\n    const evalDate = new Date(EvaluationDate);\n    const isFirstHalf = evalDate.getMonth() < 6; // First half: Jan-Jun, Second half: Jul-Dec\n    \n    if (!counselorGroups[CounselorId]) {\n      counselorGroups[CounselorId] = {\n        name: CounselorName,\n        contactId: CounselorId,\n        specialization: getRandomSpecialization(),\n        totalCases: 0,\n        evaluations: [],\n        firstHalfScores: [],\n        secondHalfScores: []\n      };\n    }\n    \n    counselorGroups[CounselorId].totalCases += 1;\n    \n    // Add score to appropriate half-year array\n    if (isFirstHalf) {\n      counselorGroups[CounselorId].firstHalfScores.push(PercentageScore);\n    } else {\n      counselorGroups[CounselorId].secondHalfScores.push(PercentageScore);\n    }\n    \n    counselorGroups[CounselorId].evaluations.push({\n      fileName: entry.AudioFileName,\n      date: new Date(EvaluationDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),\n      score: `${Math.round(PercentageScore)} / 100`,\n      categoryScores: entry.CategoryScores\n    });\n  });\n  \n  // Calculate half-year averages\n  Object.values(counselorGroups).forEach(agent => {\n    // Calculate first half average\n    if (agent.firstHalfScores.length > 0) {\n      const sum = agent.firstHalfScores.reduce((acc, score) => acc + score, 0);\n      agent.firstHalfAvg = Math.round(sum / agent.firstHalfScores.length);\n    } else {\n      agent.firstHalfAvg = 'N/A';\n    }\n    \n    // Calculate second half average\n    if (agent.secondHalfScores.length > 0) {\n      const sum = agent.secondHalfScores.reduce((acc, score) => acc + score, 0);\n      agent.secondHalfAvg = Math.round(sum / agent.secondHalfScores.length);\n    } else {\n      agent.secondHalfAvg = 'N/A';\n    }\n    \n    // Clean up temporary arrays\n    delete agent.firstHalfScores;\n    delete agent.secondHalfScores;\n  });\n  \n  // Convert to array\n  return Object.values(counselorGroups);\n};\n\n// Fetch all agents data\nconst getAllAgents = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error(`API request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data);\n    \n    const processedData = processAgentData(data);\n    console.log('Processed Agent Data:', processedData);\n    \n    return processedData;\n  } catch (error) {\n    console.error('Error fetching agent data:', error);\n    return [];\n  }\n};\n\n// Get a specific agent by ID\nconst getAgentById = async (agentId) => {\n  try {\n    const allAgents = await getAllAgents();\n    return allAgents.find(agent => agent.contactId === agentId) || null;\n  } catch (error) {\n    console.error(`Error fetching agent with ID ${agentId}:`, error);\n    return null;\n  }\n};\n\nexport const agentService = {\n  getAllAgents,\n  getAgentById\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}